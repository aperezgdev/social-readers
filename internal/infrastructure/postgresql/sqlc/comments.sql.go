// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findCommentsByPost = `-- name: FindCommentsByPost :many
SELECT 
  id, 
  content, 
  postId, 
  commentedBy, 
  createdAt 
FROM comments 
WHERE postId = $1
`

func (q *Queries) FindCommentsByPost(ctx context.Context, postid pgtype.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, findCommentsByPost, postid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Postid,
			&i.Commentedby,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveComments = `-- name: SaveComments :exec
INSERT INTO comments (
  id,
  content,
  postId,
  commentedBy
) VALUES ( $1, $2, $3, $4 )
`

type SaveCommentsParams struct {
	ID          uuid.UUID
	Content     string
	Postid      pgtype.UUID
	Commentedby pgtype.UUID
}

func (q *Queries) SaveComments(ctx context.Context, arg SaveCommentsParams) error {
	_, err := q.db.Exec(ctx, saveComments,
		arg.ID,
		arg.Content,
		arg.Postid,
		arg.Commentedby,
	)
	return err
}
