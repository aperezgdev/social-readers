// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addFollower = `-- name: AddFollower :exec
INSERT INTO user_followers (user_id, follower_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddFollowerParams struct {
	UserID     uuid.UUID
	FollowerID uuid.UUID
}

func (q *Queries) AddFollower(ctx context.Context, arg AddFollowerParams) error {
	_, err := q.db.Exec(ctx, addFollower, arg.UserID, arg.FollowerID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    u.id,
    u.name,
    u.picture,
    u.description,
    u.mail,
    u.createdAt,
    COALESCE(
        array_agg(f.follower_id) FILTER (WHERE f.follower_id IS NOT NULL),
        '{}'::uuid[]
    ) as followers
FROM users u 
LEFT JOIN user_followers f ON u.id = f.user_id
WHERE u.id = $1
GROUP BY u.id
`

type GetUserRow struct {
	ID          uuid.UUID
	Name        string
	Picture     string
	Description pgtype.Text
	Mail        string
	Createdat   pgtype.Timestamp
	Followers   interface{}
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Picture,
		&i.Description,
		&i.Mail,
		&i.Createdat,
		&i.Followers,
	)
	return i, err
}

const removeFollower = `-- name: RemoveFollower :exec
DELETE FROM user_followers
WHERE user_id = $1 AND follower_id = $2
`

type RemoveFollowerParams struct {
	UserID     uuid.UUID
	FollowerID uuid.UUID
}

func (q *Queries) RemoveFollower(ctx context.Context, arg RemoveFollowerParams) error {
	_, err := q.db.Exec(ctx, removeFollower, arg.UserID, arg.FollowerID)
	return err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO users(
  id,
  name,
  description,
  picture,
  mail
) VALUES ( $1, $2, $3, $4, $5 )
`

type SaveUserParams struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	Picture     string
	Mail        string
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) error {
	_, err := q.db.Exec(ctx, saveUser,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Picture,
		arg.Mail,
	)
	return err
}
